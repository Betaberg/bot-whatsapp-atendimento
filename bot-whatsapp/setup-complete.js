const config = require('./config/config');
const database = require('./db/database');
const fs = require('fs');
const path = require('path');

console.log('üéØ CONFIGURA√á√ÉO FINAL DO BOT WHATSAPP');
console.log('=====================================\n');

async function finalSetup() {
  try {
    // 1. Verificar arquivo .env
    const envPath = path.join(__dirname, '.env');
    const envExists = fs.existsSync(envPath);
    console.log(`1. Arquivo .env: ${envExists ? '‚úÖ Existe' : '‚ùå N√£o encontrado'}`);
    
    // 2. Verificar configura√ß√µes
    console.log('\n2. Configura√ß√µes carregadas:');
    console.log(`   - Bot Number: ${config.whatsapp.botNumber}`);
    console.log(`   - Root Numbers: ${config.whatsapp.rootNumbers.join(', ')}`);
    console.log(`   - Database Path: ${config.database.path}`);
    
    // 3. Verificar banco de dados
    const dbPath = path.join(__dirname, 'db', 'atendimento.db');
    const dbExists = fs.existsSync(dbPath);
    console.log(`\n3. Banco de dados: ${dbExists ? '‚úÖ Existe' : '‚ùå N√£o encontrado'}`);
    
    if (dbExists) {
      // 4. Verificar usu√°rios root
      console.log('\n4. Verificando usu√°rios root...');
      
      const rootNumbers = ['556981170027', '5569981170027'];
      let allRootConfigured = true;
      
      for (const number of rootNumbers) {
        let user = await database.buscarUsuario(number);
        
        if (!user) {
          console.log(`   - Criando usu√°rio ${number}...`);
          await database.criarOuAtualizarUsuario(number, 'Root User', 'root');
          user = await database.buscarUsuario(number);
        }
        
        if (user && user.role !== 'root') {
          console.log(`   - Atualizando role de ${number} para root...`);
          await database.alterarRoleUsuario(number, 'root');
          user = await database.buscarUsuario(number);
        }
        
        const isRoot = user && user.role === 'root';
        console.log(`   - ${number}: ${isRoot ? '‚úÖ ROOT' : '‚ùå N√ÉO ROOT'}`);
        
        if (!isRoot) allRootConfigured = false;
      }
      
      // 5. Listar todos os usu√°rios root
      console.log('\n5. Usu√°rios root configurados:');
      const allRootUsers = await database.listarUsuariosPorRole('root');
      if (allRootUsers.length > 0) {
        allRootUsers.forEach(user => {
          console.log(`   ‚úÖ ${user.telefone} - ${user.nome}`);
        });
      } else {
        console.log('   ‚ùå Nenhum usu√°rio root encontrado');
        allRootConfigured = false;
      }
      
      // 6. Status final
      console.log('\n' + '='.repeat(50));
      if (allRootConfigured) {
        console.log('üéâ CONFIGURA√á√ÉO CONCLU√çDA COM SUCESSO!');
        console.log('\nüì± Seu n√∫mero ser√° reconhecido como ROOT pelo bot.');
        console.log('\nüöÄ Para iniciar o bot:');
        console.log('   cd bot-whatsapp');
        console.log('   npm start');
        console.log('\nüìã Comandos dispon√≠veis para ROOT:');
        console.log('   ‚Ä¢ !config - Menu de configura√ß√µes');
        console.log('   ‚Ä¢ !listadm - Listar administradores');
        console.log('   ‚Ä¢ !listtc - Listar t√©cnicos');
        console.log('   ‚Ä¢ !admin=[numero] - Promover a admin');
        console.log('   ‚Ä¢ !tecnico=[numero] - Promover a t√©cnico');
        console.log('   ‚Ä¢ !ping - Status do sistema');
        console.log('   ‚Ä¢ !historico - Ver estat√≠sticas');
        console.log('   ‚Ä¢ !backup - Criar backup manual');
        console.log('   ‚Ä¢ !sistema - Informa√ß√µes do sistema');
      } else {
        console.log('‚ùå CONFIGURA√á√ÉO INCOMPLETA');
        console.log('\nAlguns usu√°rios root n√£o foram configurados corretamente.');
        console.log('Execute novamente este script ou verifique o banco de dados.');
      }
    } else {
      console.log('\n‚ùå Banco de dados n√£o encontrado. Execute: node init-db.js');
    }
    
  } catch (error) {
    console.error('\n‚ùå Erro durante a configura√ß√£o:', error);
  }
  
  process.exit(0);
}

// Aguardar inicializa√ß√£o do banco
setTimeout(finalSetup, 1000);
